1. Eclipse 中指定的文本编码是一种外在的东西,而不是文件的一种属性,所以只在当前的Eclipse环境中有效.
 如果Eclipse的文本编码下拉菜单没有GBK的选项,可以手工输入.这一点我原先没有意识到,总以为只能从下拉菜单选择.
 事实上是可以直接输入任意编码名称的,而且输入过一次,下次菜单中就有了.
 
 2. 全盘使用UTF-8之后,原先的AWT程序运行时button上的文字不能正确显示,不像乱码,每个汉字显示一个正方形框框.
 解决方案是在运行AWT程序时加入JVM参数(-Dfile.encoding=GBK). 目前的猜测是AWT在调用底层的图形库时,仍需转换
 字符编码(有java内部的Unicode UTF-16 到操作系统的默认字符集), 也可能是相关的字体没有正确加载.
 
 其实这也是Eclispe WEB开发时的一个常见问题,之所以现在才碰到,是因为之前的WEB开发主要服务于欧美客户,没有相关的中文问题.
 有时候偶尔遇到了,也没有在意.比如有些特殊字符,如汉字导致不能 保存文件.
 


log4j-1.2.14.jar
commons-logging/commons-logging/1.1/commons-logging-1.1.jar
JUNIT
commons-lang-2.4.jar


对于气短的块，分析其气点：
不能长气：(扣掉一手棋的花费，等于少了一气；还不如不下。)
能长一气；比如一线的气点。(扣掉一手棋的花费，等于没有长气；)
能长二气：比如二线的气点。(扣掉一手棋的花费，等于长一气；)

长气的简单应对是紧气；
新局面继续评价气点。
没有能长二气的点是一个重要的标志。可能就是要被吃住了。

2. 最近在看死活题时,总觉得有些变化自己没有把握,而答案中又没有明示. 由此想到一个问题,即我们根据什么来确定
一个变化是否值得研究,有可能是正解.有没有可能动态的积累一些统计信息来指导搜索.
先手程度的判断.
有的先手是绝对的.有的先手是相对的.尤其是死活题,往往需要打破常识.比如反打之类.
有的先手之所以明显,是因为在极短的手数之内,能够看到效果.(到达某些易于识别的最终状态,比如两眼活棋)
此处的上下文是<实用围棋死活200题>第190题(第206页).
所有可能的点:
(1,1), (1,3), (1,4), (1,5), (1,6), (1,7)	6
(2,1), (2,4), (2,6)							3
(3,4), (3,5), (3,6)							3
(4,4), (4,6)								2
 总共14个候选点. 按14!计算,有约10的13次幂个变化.
 按3的14次幂计算约有10的7次幂个状态
 死算没有出路.
 具体到这个局面,
 1.因为黑有一个做眼的好棋,白方第一个应该优先考虑.
 2.要识别到对杀的存在.对方有一个的先手系列.
 3.
 所以对杀是比死活更基础一些.

1/8/2012 7:48:44 PM
要做死活计算,需要先有初步的强弱判断. 比如棋子的连接性.否则都没有办法知道要处理的局面是死活相关的问题.

气数可以用于判断形状.
自己的两块棋有一口公气. 	一间跳.
两口公气									小尖
自己的两块棋或三块棋有三口公气									虎口
四口
 
 
形状的知识表达非常有意思,以前没有注意到.
1 小尖相连.
2 一间跳连接.
3 小飞连接.
4.

要能识别断点.其次是断点的成立与否?
能连接才有所谓断点. (公气即连接点)
一口公气才有可能断开.两口公气.(本身是断不开的)
(意外的情况包括,连上之后气紧. 或者

断开的识别: 十字扭断的形状. 共享两颗敌子.
 
 
 
 SharpSense 
 <Unseen hard Life & Death Problems>
 <Unseen moderate Life & Death Problems>

Thomas Wolf, Yutae Seo
July 13, 2011
8
 
 
 gotools not free.
 
 goproblems


有些日子没有做Java开发了. 在Windows 7中使用Eclipse还遇到挺多问题.
一个是要将非Unicode程序的编码设置为中文.
另一个是要重新生成run config. 否则总是不能启动程序.

上次将eclipse的JRE指向JDK之后,JDK 升级之后又有了新问题,将JRE指向对应的JRE之后,重建run config 问题解决.

目前的思路是.
1. 对杀的基础,对杀的成败是比较直接的结果,尽管不一定是决定性的.比如死活中有弃子的手段,就是说明对杀局部取胜
仍可能全局失败的例子. 但是一般而言,对杀结果有告一段落的味道.

按照最小气数分类.
2气.有枷吃和征吃等手段.
3气,枷吃,瓦吃,接不归等手段.拔钉子(吃秤砣).黄莺扑蝶,

2. 对杀的知识结合大眼死活的知识,可以解决简单的死活问题.

3. 复杂一点的死活问题.要搜索,但是单纯的搜索解决问题很困难,应为基本上变化数是阶乘(指数)增长的.

4.


要能够识别更过的终局局面,比如直三被点的情形.
有外气, 可以吃点眼之子,但结果仅有一眼. 对方可以杀死他
如果弃权,对方可以先紧外气,再一气吃.

没有外气,形式上双活.但杀棋方可以送吃点眼之子,一气吃.

要证明能点死,有一个方案即可.
要证明点不死,要考虑所有点的可能性.


2012年5月2日.
代码的组织非常重要,尤其是代码较多的时候,一定要有一个规则来决定相关的逻辑放在哪里.否则容易出现
重复的代码.所以化时间把这个规则想清楚非常有必要,也很有价值.现在是把棋盘相关的代码逻辑放在一个
类体系中,善待解决的问题是代码应该放在那个类中.因为其中还有一定的依赖关系.


