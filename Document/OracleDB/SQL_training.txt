There is no PPT for this training. 
1. I am not good at making PPT.
2. There are already a lot pretty good documents there.

I will just show you something related to performance tuning, let you have a feeling about performance tuning.

Do NOT be too quick. 
Please raise question when you have, do not hesitate. questions are more than welcomed. 


If you are interested, (I suppose you are interested in this since you attend this training), 
I have a very good book to recommend. it is a book called <<Effective Oracle By Design>>, 
written by Thomas Kyte  -- emphasis this in the end
By the way, most of the material i will show you comes from the second chapter of this book.

Agenda
What is execution plan?
How to get the execution plan?
How to read the execution plan?
a case study (more detailed explanation of the output of execution plan, the oracle internal
 mechanism will be disccussed here to explain the result we got)

What is executive plan?
An execution plan defines how Oracle finds or writes the data. For example, an important
 decision that Oracle has to take is if it uses indexes or not. And if there are more indexes, 
which of these is used. All this is contained in an execution plan.
when you write a SQL statement, you are thinking 

When we talk about the SQL, we majorly care about the LOGIC view of SQL statement.
But executive plan reveal the Physical View of SQL statement. 



There are many ways to get the execution plan. I will only show you my favorite one. - AUTOTRACE in SQL*PLUS
connect information
1. sqlplus codadmin/pretty-12345@fsdev_218
sqlplus csadmin/pretty-12345@csdev_192.168.2.214


SQL> set autotrace on
SQL> select * from dual;

D
-
X


Execution Plan
----------------------------------------------------------
   0      SELECT STATEMENT Optimizer=ALL_ROWS (Cost=2 Card=1 Bytes=2)
   1    0   TABLE ACCESS (FULL) OF 'DUAL' (TABLE) (Cost=2 Card=1 Bytes
          =2)





Statistics
----------------------------------------------------------
          1  recursive calls
          0  db block gets
          3  consistent gets
          0  physical reads
          0  redo size
        408  bytes sent via SQL*Net to client
        500  bytes received via SQL*Net from client
          2  SQL*Net roundtrips to/from client
          0  sorts (memory)
          0  sorts (disk)
          1  rows processed
          
Statistics tell the metrics of the operation oracle performed to execute the statement.
here is the rough explanation: 
mention the first four.

all kinds of options 
set autotrace on	--means explain plus statistics
set autotrace on explain
set autotrace on statistics

set autotrace traceonly --will not print the output, it same time if the returned result set is big.
						--means explain plus statistics
set autotrace traceonly explain
set autotrace traceonly	statistics
show you the usage
select * from bank; --terrible output.

I will give more detailed description when I refer to it later.


case study
0. the effect of index. (full table scan vs index access)
difference between table access and index access.

drop table I1;
create table I1(n number primary key, v varchar2(10), n2 number);
insert into i1 
select rownum, rpad('*',10,'*'), rownum from all_objects;
-- we only encounter performance issue when the table is big. big table means more than hundrends of thousands of records.
-- if table is small, say, there is only thousands of records. the full table scan is very possibly the best execution plan.
select count(*) from I1;
select * from I1 where rownum < 2;
select max(n) from I1;

set autotrace traceonly
alter system flush buffer_cache;
select * from I1 where n = 30000;
--primary key by default is a unique index
alter system flush buffer_cache;
select * from I1 where n2 = 30000; 
-- no index on it

set timing on;
set autotrace off;
alter system flush buffer_cache;
select * from I1 where n = 18193;
--primary key by default is a unique index
alter system flush buffer_cache;
select * from I1 where n2 = 18193; 
-- no index on it

alter system flush shared_pool;
alter system flush buffer_cache;
--to make sure the table is not in memory, otherwise, it is hard to measure the performance difference.
explain the phsical reads number.

1. now we know index can help to improve the performance, but there is some case, the index can not be used.
Following is case.
drop table MAP;
drop table I1;
drop table I2;


desc MAP;
desc I1;
desc I2;
create table I1(n number primary key, v varchar2(10));
create table I2(n number primary key, v varchar2(10));

create table MAP
(n number primary key,
 i1 number referencing I1(n),
 i2 number referencing I2(n));

create unique index IDX_MAP on MAP(i1, i2);
--drop index IDX_MAP;

insert into i1 
select rownum, rpad('*',10,'*') from all_objects;

insert into i2 
select rownum, rpad('*',10,'*') from all_objects;

insert into map 
select rownum, rownum, rownum from all_objects;

select * from I1 where rownum < 2;
select * from I2 where rownum < 2;
select * from MAP where rownum < 2;

select count(*) from I1;
select count(*) from I2;
select count(*) from MAP;

(be slower)
Point 1: 
When will the index be used?
set autotrace traceonly
select * from MAP where i1 =369;
--vs
-

may need explain it with some theory.




3. 
alter system flush shared_pool;
Point 2: full table scan may not be evil, index may not be good.
--succede with RULE hint.
set autotrace traceonly

 select/*+ RULE */ *
 from
       i1,
       map,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';

select *
 from       
       map,
       i1,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';
 
 select *
 from              
       i1,
       i2,
       map
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';

analyze table i1 compute statistics;

analyze table i2 compute statistics;

analyze table map compute statistics;

 select *
 from
       i1,
       map,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';



--final Solution:
set autotrace off
create index i1_idx on i1(v);

analyze table i1 compute statistics;

set autotrace traceonly

 select *
 from
       i1,
       map,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';

set autotrace off

select *
 from
       i1,
       map,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = '369'
 and i2.v = '369';
 
 explain plan for
 
 @?/rdbms/admin/utlxpls
 
 @?\rdbms\admin\utlxpls
 
 
 3
 select * from scott.emp
 select * from scott.emp temp, scott.dept tdept where temp.deptno=tdept.deptno;

If you can not reproduce the description in the book, try to control the environment. for example, add hint to affect the execution plan.
If you have something you are not so sure of, please design a small case to verify it. it is an effective way to learn.




To summarize, I hope now you know 
What is a executive plan.
How to get and read executive plan.


If you want to improve SQL tuning capability, Do remember the book I reccomended in the geginning.
<<Effective Oracle By Design>>, written by Thomas Kyte  -- 
It covers all the things you need to know to be an tuning expert. it is worth reading.
By the way, most of the material i will show you comes from the second chapter of this book.




select/*+ HASH_JOIN */ *
 from
       i1,
       map,
       i2
 where     i1.n = map.i1
 and i2.n = map.i2
 and i1.v = 'x'
 and i2.v = 'y';
 
 
 
 
 
 
cd /opt/oracle/product/10.2.0/db_1/sqlplus/admin
sqlplus "sys/pretty-12345 as sysdba"

@plustrace.sql
grant plustrace to public;

set autotrace traceonly;

 