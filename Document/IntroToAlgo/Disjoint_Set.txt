Rooted Tree of dis-joint set

1. use embedded structre, since we do not know the target object type.
(The usage will not be shown here)

2. but we also include a string in the structure to show the effect.

3. Root point to itself = root point to null?
Now I understand the difference.
if we use while(temp!=null). finally we get null, it is not we want to return.
fi we use while(temp.parent!=temp). finally we get root. it can be returned 
directly, make the code simple.

4. The Set of Set.
we only care about the procedure to make set, unite sets, find element 
from set.

The work of collecting all the set are maintained by the cliet code.

5. also use the graph demo to show the usage of disjoint set.

6. The big lessons: miss one curly bracket. cause error message which 
does not make sense (no hint or wrong hint).

7. This data structure did not track the element in the same set. it is not
trivial to collect all the elements in the set. However if we use linked list, 
we can get the element in the set much easier. (According to our requirement,
or intended usage, the optimized data structure will change. we need to know 
the characteristic of each data structure and combine them to get expected 
result.)

//set_node.h
struct set_node{
    char* name;
    struct set_node* parent;  
}

struct set_node* make_set(char* name);
struct set_node* unite_set(struct set_node* a, struct set_node*  b);
struct set_node* find_set(struct set_node* a);

//set_node.c
#include "set_node.h"
/**
 * return the pointer to the first element in the set.
 */
struct set_node* make_set(char* name){
    struct set_node* node = (struct set_node)malloc(sizeof(struct set_node));
    node.name=name;
    node.parent=node;
    return node;
}
/**
 * unite two sets and 
 * return the pointer to the first element in the set.
 */
struct set_node* unite_set(struct set_node* a, struct set_node*  b){
    set_node* na = find_set(a);
    set_node* nb = find_set(b);
    na.parent=nb;
}

/**
 * find the representative for the node 
 * return the pointer to the first element in the set.
 */
struct set_node* find_set(struct set_node* a){
    struct set_node* temp = a;
    while(temp.parent!=temp){
        temp = temp.parent;
    }
    return temp;
}

//test routine
//set_node_test.c
/**
 * based on the Chapter 21 of Introduction of Algorithm.
 */
#include "set_node.h"
int vertex_size=10;
int edge_size=7;
char vertex [vertex_size];
char edge[edge_size][2];
struct set_node* nodes[vertex_size];
int res [10][10];//set when two element are in the same set.
 
void init(){
    int i=0;
    for(;i<vertex_size;i++){
        vertex[i]='a'+i;
        prinf("%c\n",vertex[i];
    }
    edge[0][0]='b';
    edge[0][1]='d';
    
    edge[1][0]='e';
    edge[1][1]='g';
    
    edge[2][0]='a';
    edge[2][1]='c';
    
    edge[3][0]='h';
    edge[3][1]='i';
    
    edge[4][0]='a';
    edge[4][1]='b';
    
    edge[5][0]='e';
    edge[5][1]='f';
    
    edge[6][0]='b';
    edge[6][1]='c';
    i=0;
    for(;i<edge_size;i++){
    prinf("%c --- %c\n",edge[i][0], edge[i][1]);
    
    //first connected componet.
    res[0][1]=1;
    res[0][2]=1;
    res[0][3]=1;
    res[1][2]=1;
    res[1][3]=1;
    res[2][3]=1;  
       
    //second connected componet.
    res[4][5]=1;
    res[4][6]=1;
    res[5][6]=1;
    
    //third connected componet.
    res[7][8]=1;    
}

int main(int argd, char*  args[]){
    init();
    connected_comp();
    verify();
}

void verify(){
    int i=0;
    int j=0;
    for(;i<vertex_size;i++){
        j=0;
         for(;j<vertex_size;j++){
            if((find_set(nodes[i])==find_set(nodes[j]))!=res[i][j]){
                printf("i=%d, j=%d, res[i][j]=%d",i,j,res[i][j]);
                printf("problem with node %c and %c", vertex[i],vertex[j]);
            }
         }
     }
}

void connected_comp(){
    int i=0;
    for(;i<vertex_size;i++){
        nodes[i] = make_set(&vertex[i]);
    }
    i=0;
    for(;i<edge_size;i++){
        char a=edge[i][0];
        int ia = a-'a';
        char b=edge[i][1];
        int ib=b -'a';
        struct set_node* nodea=nodes[ia];
        struct set_node* nodeb=nodes[ib];
        
        if(find_set(nodea)!=find_set(nodeb)){
            unite_set(nodea,nodeb);
        }
    }
}

//version 2 with the rank.

