35$Ticket!
Password to 99.
home folder: eddie

8/29/2008 9:14AM
I will switch to preparation of PMP exam. For records, here is the TODO list of current endeavor.
1. how does Make file work?
2. GNU make example learning - driven by 1.
3. compile one kerne; 
4. then compile one optimized kernel.

the book to read:
1. GNU make
2. Linux Kernel in a nutshell



four way to get a basic .config
1. get from a distribution 
I get .config from 214
cp .config config_from_214

it can also be generated by the following:

2. use the default setting used by kernel developer.
make defconfig > ../default_config.output
apply the arch/x86/configs/i386_defconfig
The error is as the following :
arch/x86/configs/i386_defconfig:526:warning: trying to assign nonexistent symbol BLK_DEV_IDEDMA_FORCED
arch/x86/configs/i386_defconfig:527:warning: trying to assign nonexistent symbol IDEDMA_ONLYDISK
arch/x86/configs/i386_defconfig:557:warning: trying to assign nonexistent symbol IDEDMA_IVB
arch/x86/configs/i386_defconfig:793:warning: trying to assign nonexistent symbol DGRS
arch/x86/configs/i386_defconfig:853:warning: trying to assign nonexistent symbol USB_USBNET_MII
arch/x86/configs/i386_defconfig:884:warning: trying to assign nonexistent symbol INPUT_TSDEV
arch/x86/configs/i386_defconfig:1284:warning: trying to assign nonexistent symbol RAMFS


8/26/2008 1:45PM
uname -m 
i686

uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/
i386

prevent the inconsistent name for same thing. those are small tips to handle 
different names for same things.

 sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \
                                  -e s/arm.*/arm/ -e s/sa110/arm/ \
                                  -e s/s390x/s390/ -e s/parisc64/parisc/ \
                                  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \
                                  -e s/sh[234].*/sh/ )
                                  
How kernel build works?
It is an important step to understand the code structure. 
(Last national holiday, I spend about one week to understand how sun's 
JVM-Hot Spot was build.)

2. dry run the build process. 
./Makefile
make --dry-run > ../dry_run.txt
I can have a over all understanding of the build process.

learn more about the shell command and GNU make.
see file dry_run.txt
grep '^make -f' dry_run.txt > all_make_file.txt

we can see the fiel scripts/Makefile.build play an important role.
make -f scripts/Makefile.build obj=scripts/basic
make -f scripts/Makefile.build obj=.
make -f scripts/Makefile.build obj=. missing-syscalls
...

That means when you execute 
make all
the main control make process will fork child process by execute 
make -f scripts/Makefile.build obj=.
make -f scripts/Makefile.build obj=. missing-syscalls

missing-syscalls should be a parameter to specify the target.

then in scripts/Makefile.build
    src := $(obj)
$(src) will point to the target sub-folder.

here is the source for 
make -f scripts/Makefile.build obj=.
make -f scripts/Makefile.build obj=. missing-syscalls

prepare0: archprepare FORCE
        $(Q)$(MAKE) $(build)=.
        $(Q)$(MAKE) $(build)=. missing-syscalls

# All the preparing..
prepare: prepare0

It seems

where is the definition of $(MAKE)?

where is the reference to or definition of scripts/Makefile.build

3 RAM disk - have a peek on it. easy to understand. But how to make a 
portable (movable) USB Flash OS so that you can have a consistent 
environment no matter where you are?

# We need some generic definitions (do not try to remake the file).
$(srctree)/scripts/Kbuild.include: ;
include $(srctree)/scripts/Kbuild.include

which define some utility function.

LINUXINCLUDE    := -Iinclude \
                   $(if $(KBUILD_SRC),-Iinclude2 -I$(srctree)/include) \
                   -include include/linux/autoconf.h

vi  include/linux/autoconf.h
#define AUTOCONF_INCLUDED
#define CONFIG_BLK_DEV_FD 1
#define CONFIG_ACPI_AC 1
#define CONFIG_ACPI_SYSFS_POWER 1
#define CONFIG_X86_POWERNOW_K8_ACPI 1
#define CONFIG_ACPI_EC 1
...
#define CONFIG_AUTOFS4_FS 1
#define CONFIG_DUMMY_CONSOLE 1
#define CONFIG_HW_RANDOM_VIA 1
#define CONFIG_HIGHMEM 1


scripts_basic:
        $(Q)$(MAKE) $(build)=scripts/basic
?definition of build?

include a file into the make file.
-include include/config/auto.conf
- (minus) means ingore the error if the file is not existed.

include/config/kernel.release: include/config/auto.conf FORCE
        $(Q)rm -f $@
        $(Q)echo $(kernelrelease) > $@
??ß
?FORCE?
%:: FORCE
        $(Q)$(MAKE) -C $(srctree) KBUILD_SRC= $@






9/22/2008 1:53PM
resume the kernel learing activity. 
I also bought a new book called <<Linux Kernel Primer>>, it is based on x86 and 
Power PC platform.


what happened when you execute the following command.
make all

The most important make files.

1. Makefile in current folder.

2. scripts/Makefile.build

In documentation/makefile.txt, it is said The Makefiles have five parts:
	Makefile		        the top Makefile.
	.config			        the kernel configuration file.
	arch/$(ARCH)/Makefile	the arch Makefile.
	scripts/Makefile.*	    common rules etc. for all kbuild Makefiles.
	kbuild Makefiles	    there are about 500 of these.

scripts/Makefile.build        
scripts/Makefile.lib
scripts/Makefile.clean        
scripts/Makefile.modinst
scripts/Makefile.headersinst  
scripts/Makefile.modpost
scripts/Makefile.host


 Kbuild has the definiton of target - missing-syscalls
 
 
[oracle@ora10gapp1 linuxnote]$ wc all_make*
    142     569    7025 all_make_call.txt
    974     974   28828 all_makefile.txt
   1116    1543   35853 total
It shows that not all the Makefile are invoked. for x86 arch, 
only 142 of the total 974 Makefiles are called.

[oracle@ora10gapp1 linuxnote]$ grep arch all_makefile.txt | wc
    459     459   14744
most of them are arch specific.

[oracle@ora10gapp1 linuxnote]$ grep arch/x86 all_makefile.txt | wc
     26      26     755
there are about 20 arch. so it is reasonable to have 459 arch specific Makefile.

974 - 459 = 515 are not arch specific
only about 142 -26 = 116 are used in x86.
what are the usage of these left Makefile.

[oracle@ora10gapp1 linuxnote]$ wc all_make_call.txt 
    142     569    7025 all_make_call.txt
[oracle@ora10gapp1 linuxnote]$ grep drivers all_make_call.txt | wc
     72     288    3761
[oracle@ora10gapp1 linuxnote]$ grep kernel all_make_call.txt | wc
     10      40     530
[oracle@ora10gapp1 linuxnote]$ grep fs all_make_call.txt | wc
     22      88     972
[oracle@ora10gapp1 linuxnote]$ grep net all_make_call.txt | wc
     17      68     791
[oracle@ora10gapp1 linuxnote]$ grep arch all_make_call.txt | wc
     15      60     837
only 6 left, there are lib*2 ipc security crypto block





make config first, it update .config file.
then make all


[oracle@ora10gapp1 linux.git]$ grep 'not set' .config | wc
    729    3645   23397
[oracle@ora10gapp1 linux.git]$ wc .config
   1482    4556   36072 .config
There are about 1482 config options, only 729 are set.


SUBARCH := $(shell uname -m | sed -e s/i.86/i386/ -e s/sun4u/sparc64/ \
				  -e s/arm.*/arm/ -e s/sa110/arm/ \
				  -e s/s390x/s390/ -e s/parisc64/parisc/ \
				  -e s/ppc.*/powerpc/ -e s/mips.*/mips/ \
				  -e s/sh[234].*/sh/ )
ARCH		?= $(SUBARCH)
ARCH is an important variable, it is decided by the host if there is no explicit setting for it. please note there are several alias for it. e.g. SRCARCH, UTS_MACHINE

UTS_MACHINE 	:= $(ARCH)
SRCARCH 	:= $(ARCH)
# Additional ARCH settings for x86
ifeq ($(ARCH),i386)
        SRCARCH := x86
endif
ifeq ($(ARCH),x86_64)
        SRCARCH := x86
endif

boards := $(wildcard $(srctree)/arch/$(ARCH)/configs/*_defconfig)
boards := $(notdir $(boards))

ifeq ($(ALLSOURCE_ARCHS),)
ifeq ($(ARCH),um)
ALLINCLUDE_ARCHS := $(ARCH) $(SUBARCH)
else
ALLINCLUDE_ARCHS := $(SRCARCH)
endif
else
#Allow user to specify only ALLSOURCE_PATHS on the command line, keeping existing behaviour.
ALLINCLUDE_ARCHS := $(ALLSOURCE_ARCHS)
endif

ALLSOURCE_ARCHS := $(SRCARCH)

ifeq ($(ARCH), um)
CHECKSTACK_ARCH := $(SUBARCH)
else
CHECKSTACK_ARCH := $(ARCH)
endif
checkstack:
	$(OBJDUMP) -d vmlinux $$(find . -name '*.ko') | \
	$(PERL) $(src)/scripts/checkstack.pl $(CHECKSTACK_ARCH)

um stands for user mode Linux, it need special treatment.	because if set ARCH=um, you still need to know on which platform the um was implemented.


common make variable.
$@ target (file name)
$* main part of target file name (without suffix and .)
$% used very rarely. (refer to bar.o when the target is foo.a(bar.o)

$< first prerequisite
$? newly updated prerequisite
$^ all the prerequisite without any duplication
$+ all the prerequisite (duplication is allowed)

in line 510:
include $(srctree)/arch/$(SRCARCH)/Makefile

in line 208:
KCONFIG_CONFIG	?= .config

in line 367, first reference to $(build)
scripts_basic:
	$(Q)$(MAKE) $(build)=scripts/basic
	
build is not defined in itself, also not in .config and arch makefile.

more example about how $(build) was used:
%.s: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.i: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.o: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.lst: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.s: %.S prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.o: %.S prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)
%.symtypes: %.c prepare scripts FORCE
	$(Q)$(MAKE) $(build)=$(build-dir) $(target-dir)$(notdir $@)

line 294
# We need some generic definitions (do not try to remake the file).
$(srctree)/scripts/Kbuild.include: ;
include $(srctree)/scripts/Kbuild.include

yeah. find it
line 137
build := -f $(if $(KBUILD_SRC),$(srctree)/)scripts/Makefile.build obj

$(if $(KBUILD_SRC),$(srctree)/) is a whole. is called if funcation.
if $(KBUILD_SRC) is defined. the result is $(srctree)/, otherwise.
$(if is the start of the if funcation.
at the beginning, I am confused. try to evaluate the content in () as the following.
if $(KBUILD_SRC),$(srctree)/

the result is 
make -f scripts/Makefile.build obj=.

some variable such as CURDIR is built-in make variable.
MAKE_VERSION
MAKEFILE_LIST
MAKECMDGOALS
.VARIABLES
CURDIR
MAKEFLAGS




  CHK     include/linux/version.h
  SYMLINK include/asm -> include/asm-x86
  CALL    scripts/checksyscalls.sh
  CC      init/version.o
  LD      init/mounts.o
  HOSTCC  usr/gen_init_cpio
  GEN     usr/initramfs_data.cpio
  AS      usr/initramfs_data.o
  
in the build, many information are for different file system.
actually we do not need so much. we only enable ext3.
we also disable net and sound.